package com.jabiseo.opensearch;

import com.jabiseo.analysis.dto.VulnerableSubjectDto;
import com.jabiseo.analysis.dto.VulnerableTagDto;
import com.jabiseo.analysis.exception.AnalysisBusinessException;
import com.jabiseo.analysis.exception.AnalysisErrorCode;
import com.jabiseo.analysis.service.VulnerabilityProvider;
import com.jabiseo.common.exception.CommonErrorCode;
import com.jabiseo.opensearch.helper.OpenSearchHelper;
import com.jabiseo.opensearch.helper.OpenSearchResultDto;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;

@Component
@RequiredArgsConstructor
public class OpenSearchVulnerabilityProvider implements VulnerabilityProvider {

    // 데이터베이스에서 과목과 태그 이름을 가져오기 위한 컬럼명
    // OpenSearch의 결과에서 해당 컬럼명으로 값을 가져와야 함
    private final static String NAME_FIELD_COLUMN_NAME = "name";

    // 취약 문제 검색 시 과목 필터링을 위한 컬럼명
    // Subject Entity의 컬럼명과 동일해야 함
    private final static String SUBJECT_ID_COLUMN = "subjectId";

    private final OpenSearchHelper openSearchHelper;

    @Override
    public Map<Long, List<Float>> findVectorsOfProblems(List<Long> problemIds, Long certificateId) {
        // 자격증에 해당하는 문제 인덱스 및 벡터 정보
        CertificateIndexInfo certificateIndexInfo = CertificateIndexInfo.findByCertificateId(certificateId);
        String indexName = certificateIndexInfo.getProblemIndexName();
        String vectorName = certificateIndexInfo.getProblemVectorName();

        try {
            return openSearchHelper.fetchVectors(problemIds, indexName, vectorName);
        } catch (Exception e) {
            throw new AnalysisBusinessException(AnalysisErrorCode.CANNOT_FIND_VECTOR);
        }
    }

    @Override
    public List<VulnerableSubjectDto> findVulnerableSubjects(List<Float> vulnerableVector, Long certificateId) {
        // 자격증에 해당하는 과목 인덱스 및 벡터 정보
        CertificateIndexInfo certificateIndexInfo = CertificateIndexInfo.findByCertificateId(certificateId);
        String indexName = certificateIndexInfo.getSubjectIndexName();
        String vectorName = certificateIndexInfo.getSubjectVectorName();

        List<OpenSearchResultDto> results = openSearchHelper.searchSimilarItems(vulnerableVector, indexName, vectorName);
        try {
            return results.stream()
                    .map(result -> VulnerableSubjectDto.of(
                            Long.parseLong(result.id()),
                            result.source().asJsonObject().getString(NAME_FIELD_COLUMN_NAME),
                            calculateVulnerableRate(result.score())
                    ))
                    .toList();
        } catch (Exception e) {
            throw new AnalysisBusinessException(CommonErrorCode.INTERNAL_SERVER_ERROR);
        }
    }

    @Override
    public List<VulnerableTagDto> findVulnerableTags(List<Float> vulnerableVector, Long certificateId, int tagCount) {
        // 자격증에 해당하는 태그 인덱스 및 벡터 정보
        CertificateIndexInfo certificateIndexInfo = CertificateIndexInfo.findByCertificateId(certificateId);
        String indexName = certificateIndexInfo.getTagIndexName();
        String vectorName = certificateIndexInfo.getTagVectorName();

        List<OpenSearchResultDto> results = openSearchHelper.searchSimilarItems(vulnerableVector, indexName, vectorName, tagCount);
        try {
            return results.stream()
                    .map(result -> VulnerableTagDto.of(
                            Long.parseLong(result.id()),
                            result.source().asJsonObject().getString(NAME_FIELD_COLUMN_NAME),
                            calculateVulnerableRate(result.score())
                    ))
                    .toList();
        } catch (Exception e) {
            throw new AnalysisBusinessException(CommonErrorCode.INTERNAL_SERVER_ERROR);
        }
    }

    @Override
    public List<Long> findVulnerableProblemIdsOfSubject(List<Float> vulnerableVector, Long certificateId, Long subjectId, int problemCount) {
        // 자격증에 해당하는 문제 인덱스 및 벡터 정보
        CertificateIndexInfo certificateIndexInfo = CertificateIndexInfo.findByCertificateId(certificateId);
        String indexName = certificateIndexInfo.getProblemIndexName();
        String vectorName = certificateIndexInfo.getProblemVectorName();

        return openSearchHelper.searchSimilarIdsWithFiltering(vulnerableVector, indexName, vectorName, problemCount, SUBJECT_ID_COLUMN, subjectId);
    }

    @Override
    public List<Long> findVulnerableProblems(List<Float> vulnerableVector, Long certificateId, int problemCount) {
        // 자격증에 해당하는 문제 인덱스 및 벡터 정보
        CertificateIndexInfo certificateIndexInfo = CertificateIndexInfo.findByCertificateId(certificateId);
        String indexName = certificateIndexInfo.getProblemIndexName();
        String vectorName = certificateIndexInfo.getProblemVectorName();

        return openSearchHelper.searchSimilarIds(vulnerableVector, indexName, vectorName, problemCount);
    }

    private int calculateVulnerableRate(double score) {
        // TODO: 정확한 취약률 계산 필요
        // TODO: 이 로직을 어떤 모듈에 넣을지 고민, 비즈니스 로직이니까 domain에 넣어야 하는지, 오픈서치 관련 로직이니까 infrastructure에 넣어야 하는지
        return (int) (score * 100);
    }
}
