package com.jabiseo.opensearch;

import com.jabiseo.analysis.dto.VulnerableSubjectResponse;
import com.jabiseo.analysis.dto.VulnerableTagResponse;
import com.jabiseo.analysis.exception.AnalysisBusinessException;
import com.jabiseo.common.exception.CommonErrorCode;
import com.jabiseo.opensearch.helper.OpenSearchHelper;
import com.jabiseo.opensearch.helper.OpenSearchResultDto;
import jakarta.json.Json;
import jakarta.json.JsonObject;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.BDDMockito.given;

@DisplayName("취약점 제공 기능 테스트")
@ExtendWith(MockitoExtension.class)
class OpenSearchVulnerabilityProviderTest {

    @InjectMocks
    OpenSearchVulnerabilityProvider sut;

    @Mock
    OpenSearchHelper openSearchHelper;

    @Test
    @DisplayName("[findVectorsOfProblems 테스트] 문제 벡터 조회 시 존재하지 않는 certificateId가 주어지면 예외처리한다.")
    void givenNonExistedCertificateId_whenFindVectorsOfProblems_thenReturnError() throws Exception {
        //given
        Long nonExistedCertificateId = 0L;
        List<Long> problemIds = List.of(1L, 2L, 3L);

        //when & then
        assertThatThrownBy(() -> sut.findVectorsOfProblems(problemIds, nonExistedCertificateId))
                .isInstanceOf(AnalysisBusinessException.class)
                .hasFieldOrPropertyWithValue("errorCode", CommonErrorCode.INTERNAL_SERVER_ERROR);
    }

    @Test
    @DisplayName("[findVectorsOfProblems 테스트] 문제 id 리스트와 자격증 id가 주어지면 opensearch와 통신을 해 문제 벡터를 조회한다.")
    void givenProblemIdsAndCertificateId_whenFindVectorsOfProblems_thenReturnProblemVectors() {
        //given
        Long certificateId = 1L; //정보처리기사
        List<Long> problemIds = List.of(2L, 3L, 4L);
        Map<Long, List<Float>> problemVectors = new HashMap<>(Map.of(
                2L, List.of(0.1f, 0.2f, 0.3f),
                3L, List.of(0.4f, 0.5f, 0.6f),
                4L, List.of(0.7f, 0.8f, 0.9f)
        ));

        problemIds.forEach(problemId -> given(openSearchHelper.fetchVector(eq(problemId), any(), any()))
                .willReturn(problemVectors.get(problemId)));

        //when
        Map<Long, List<Float>> vectorsOfProblems = sut.findVectorsOfProblems(problemIds, certificateId);

        //then
        assertThat(vectorsOfProblems).containsAllEntriesOf(problemVectors);
    }

    @Test
    @DisplayName("[findVulnerableSubjects 테스트] 취약 벡터와 자격증 id가 주어지면 취약 과목을 조회한다.")
    void givenVulnerableVectorAndCertificateId_whenFindVulnerableSubjects_thenReturnVulnerableSubjects() {
        //given
        Long certificateId = 1L; //정보처리기사
        List<Float> vulnerableVector = List.of(0.1f, 0.2f, 0.3f);
        JsonObject mockJsonObject = Json.createObjectBuilder()
                .add("name", "과목이름")
                .build();
        List<OpenSearchResultDto> results = List.of(
                new OpenSearchResultDto("1", 0.1143, mockJsonObject),
                new OpenSearchResultDto("2", 0.15, mockJsonObject),
                new OpenSearchResultDto("3", 0.2, mockJsonObject)
        );

        given(openSearchHelper.searchSimilarItems(eq(vulnerableVector), any(), any())).willReturn(results);

        //when
        List<VulnerableSubjectResponse> vulnerableSubjectResponses = sut.findVulnerableSubjects(vulnerableVector, certificateId);

        //then
        assertThat(vulnerableSubjectResponses).containsExactly(
                new VulnerableSubjectResponse(1L, "과목이름", 11),
                new VulnerableSubjectResponse(2L, "과목이름", 15),
                new VulnerableSubjectResponse(3L, "과목이름", 20)
        );
    }

    @Test
    @DisplayName("[findVulnerableTags 테스트] 취약 벡터와 자격증 id가 주어지면 취약 벡터을 조회한다.")
    void givenVulnerableVectorAndCertificateId_whenFindVulnerableTags_thenReturnVulnerableTags() {
        //given
        Long certificateId = 1L; //정보처리기사
        List<Float> vulnerableVector = List.of(0.1f, 0.2f, 0.3f);
        JsonObject mockJsonObject = Json.createObjectBuilder()
                .add("name", "과목이름")
                .build();
        List<OpenSearchResultDto> results = List.of(
                new OpenSearchResultDto("1", 0.1143, mockJsonObject),
                new OpenSearchResultDto("2", 0.15, mockJsonObject),
                new OpenSearchResultDto("3", 0.2, mockJsonObject)
        );

        given(openSearchHelper.searchSimilarItems(eq(vulnerableVector), any(), any(), eq(3))).willReturn(results);

        //when
        List<VulnerableTagResponse> vulnerableTagResponses = sut.findVulnerableTags(vulnerableVector, certificateId, 3);

        //then
        assertThat(vulnerableTagResponses).containsExactly(
                new VulnerableTagResponse(1L, "과목이름", 11),
                new VulnerableTagResponse(2L, "과목이름", 15),
                new VulnerableTagResponse(3L, "과목이름", 20)
        );
    }

    @Test
    @DisplayName("[findVulnerableProblemIdsOfSubject 테스트] 취약 벡터와 자격증 id, 과목 id가 주어지면 과목들의 취약 문제들을 조회한다.")
    void givenVulnerableVectorAndCertificateIdAndSubjectId_whenFindVulnerableProblemIdsOfSubject_thenReturnVulnerableProblemIds() {
        //given
        Long certificateId = 1L; //정보처리기사
        Long subjectId = 2L;
        int problemCount = 3;
        List<Float> vulnerableVector = List.of(0.1f, 0.2f, 0.3f);

        List<Long> problemIds = List.of(4L, 5L, 6L);

        given(openSearchHelper.searchSimilarIdsWithFiltering(eq(vulnerableVector), any(), any(), eq(problemCount), any(), eq(subjectId))).willReturn(problemIds);

        //when
        List<Long> problemIdsOfSubject = sut.findVulnerableProblemIdsOfSubject(vulnerableVector, certificateId, subjectId, problemCount);

        //then
        assertThat(problemIdsOfSubject).containsExactly(4L, 5L, 6L);
    }

    @Test
    @DisplayName("[findVulnerableProblems 테스트] 취약 벡터와 자격증 id가 주어지면 취약 문제들을 조회한다.")
    void givenVulnerableVectorAndCertificateId_whenFindVulnerableProblemIds_thenReturnVulnerableProblemIds() {
        //given
        Long certificateId = 1L; //정보처리기사
        List<Float> vulnerableVector = List.of(0.1f, 0.2f, 0.3f);

        List<Long> problemIds = List.of(4L, 5L, 6L);

        given(openSearchHelper.searchSimilarIds(eq(vulnerableVector), any(), any(), eq(3))).willReturn(problemIds);

        //when
        List<Long> problemIdsOfSubject = sut.findVulnerableProblems(vulnerableVector, certificateId, 3);

        //then
        assertThat(problemIdsOfSubject).containsExactly(4L, 5L, 6L);
    }

}
